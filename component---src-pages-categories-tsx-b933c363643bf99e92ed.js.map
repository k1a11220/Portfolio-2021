{"version":3,"sources":["webpack://gatsby-starter-default/./src/components/Main/CategoryList.tsx","webpack://gatsby-starter-default/./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","webpack://gatsby-starter-default/./src/pages/categories.tsx"],"names":["CategoryListWrapper","styled","CategoryItem","active","props","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","selectedCategory","categoryList","entries","map","name","count","to","Container","theme","indexColor","search","location","data","edges","allMarkdownRemark","parsed","file","childImageSharp","fluid","queryString","category","useMemo","reduce","list","node","frontmatter","categories","forEach","undefined","All","Template","title","description","url","image","PostList","posts"],"mappings":"kPAqBMA,EAAsBC,SAAH,sPAgBnBC,GAAeD,SAAO,cAAGE,OAAH,IAAcC,ECrC3B,SAAuCC,EAAQC,GAC5D,GAAc,MAAVD,EAAgB,MAAO,GAC3B,IAEIE,EAAKC,EAFLC,EAAS,GACTC,EAAaC,OAAOC,KAAKP,GAG7B,IAAKG,EAAI,EAAGA,EAAIE,EAAWG,OAAQL,IACjCD,EAAMG,EAAWF,GACbF,EAASQ,QAAQP,IAAQ,IAC7BE,EAAOF,GAAOF,EAAOE,IAGvB,OAAOE,EDyBmB,sBAC1B,gBAAC,KAASL,KADSH,CAAH,4OAMD,qBAAGE,OAAuB,MAAQ,SA8BnD,EAlB2D,YAGvD,IAFFY,EAEC,EAFDA,iBACAC,EACC,EADDA,aAEA,OACE,gBAAChB,EAAD,KACGW,OAAOM,QAAQD,GAAcE,KAAI,gBAAEC,EAAF,KAAQC,EAAR,YAChC,gBAAClB,EAAD,CACEmB,GAAE,yBAA2BF,EAC7BhB,OAAQgB,IAASJ,EACjBR,IAAKY,GAHP,IAKIA,EALJ,IAKWC,EALX,U,oBErCFE,EAAYrB,SAAH,kDACO,SAACG,GAAD,OAAWA,EAAMmB,MAAMC,cA2D7C,EAxD+D,YAQ3D,IAPUC,EAOX,EAPDC,SAAYD,OAOX,IANDE,KACuBC,EAKtB,EALCC,kBAAqBD,MAMjBE,GADL,EAJCC,KACEC,gBAAmBC,MAIaC,QAAkBT,IAChDV,EACuB,iBAApBe,EAAOK,UAA0BL,EAAOK,SAE3CL,EAAOK,SADP,MAGAnB,GAAeoB,cACnB,kBACER,EAAMS,QACJ,SACEC,EADF,GAeE,OARG,EAJDC,KACEC,YAAeC,WAIRC,SAAQ,SAACP,QACKQ,IAAnBL,EAAKH,GAAyBG,EAAKH,GAAY,EAC9CG,EAAKH,QAGZG,EAAI,MAEGA,IAET,CAAEM,IAAK,MAEX,IAEF,OACE,gBAACC,EAAA,EAAD,CACEC,MAAM,cACNC,YAAY,2BACZC,IAAI,MACJC,MAAM,OAEN,gBAAC3B,EAAD,KACE,gBAAC,EAAD,CACEP,iBAAkBA,EAClBC,aAAcA,IAEhB,gBAACkC,EAAA,EAAD,CAAUnC,iBAAkBA,EAAkBoC,MAAOvB","file":"component---src-pages-categories-tsx-b933c363643bf99e92ed.js","sourcesContent":["import React, { FunctionComponent, ReactNode } from \"react\";\nimport styled from \"styled-components\";\nimport { Link } from \"gatsby\";\n\ntype CategoryItemProps = {\n  active: boolean;\n};\n\ntype GatsbyLinkProps = {\n  children: ReactNode;\n  className?: string;\n  to: string;\n} & CategoryItemProps;\n\nexport interface CategoryListProps {\n  selectedCategory: string;\n  categoryList: {\n    [key: string]: number;\n  };\n}\n\nconst CategoryListWrapper = styled.div`\n  position: relative;\n  top: 64px;\n  padding-bottom: 64px;\n  display: flex;\n  flex-wrap: wrap;\n  width: 1200px;\n  margin: 100px auto 0;\n\n  @media (max-width: 1400px) {\n    width: 92%;\n    margin-top: 50px;\n  }\n`;\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst CategoryItem = styled(({ active, ...props }: GatsbyLinkProps) => (\n  <Link {...props} />\n))<CategoryItemProps>`\n  margin-right: 20px;\n  padding: 5px 0;\n  font-size: 18px;\n  font-weight: ${({ active }) => (active ? \"700\" : \"400\")};\n  cursor: pointer;\n\n  &:last-of-type {\n    margin-right: 0;\n  }\n\n  @media (max-width: 768px) {\n    font-size: 15px;\n  }\n`;\n\nconst CategoryList: FunctionComponent<CategoryListProps> = function ({\n  selectedCategory,\n  categoryList,\n}) {\n  return (\n    <CategoryListWrapper>\n      {Object.entries(categoryList).map(([name, count]) => (\n        <CategoryItem\n          to={`/categories/?category=${name}`}\n          active={name === selectedCategory}\n          key={name}\n        >\n          #{name}({count})\n        </CategoryItem>\n      ))}\n    </CategoryListWrapper>\n  );\n};\nexport default CategoryList;\n","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import React, { FunctionComponent, useMemo } from \"react\";\nimport Template from \"components/Common/Template\";\nimport CategoryList, { CategoryListProps } from \"components/Main/CategoryList\";\nimport PostList, { PostType } from \"components/Main/PostList\";\nimport { ProfileImageProps } from \"components/Main/ProfileImage\";\nimport { graphql } from \"gatsby\";\nimport queryString, { ParsedQuery } from \"query-string\";\nimport styled from \"styled-components\";\n\ninterface CategoriesPageProps {\n  location: {\n    search: string;\n  };\n  data: {\n    allMarkdownRemark: {\n      edges: PostType[];\n    };\n    file: {\n      childImageSharp: {\n        fluid: ProfileImageProps[\"profileImage\"];\n      };\n    };\n  };\n}\n\nconst Container = styled.div`\n  background-color: ${(props) => props.theme.indexColor};\n`;\n\nconst CategoriesPage: FunctionComponent<CategoriesPageProps> = function ({\n  location: { search },\n  data: {\n    allMarkdownRemark: { edges },\n    file: {\n      childImageSharp: { fluid },\n    },\n  },\n}) {\n  const parsed: ParsedQuery<string> = queryString.parse(search);\n  const selectedCategory: string =\n    typeof parsed.category !== \"string\" || !parsed.category\n      ? \"All\"\n      : parsed.category;\n\n  const categoryList = useMemo(\n    () =>\n      edges.reduce(\n        (\n          list: CategoryListProps[\"categoryList\"],\n          {\n            node: {\n              frontmatter: { categories },\n            },\n          }: PostType\n        ) => {\n          categories.forEach((category) => {\n            if (list[category] === undefined) list[category] = 1;\n            else list[category]++;\n          });\n\n          list[\"All\"]++;\n\n          return list;\n        },\n        { All: 0 }\n      ),\n    []\n  );\n  return (\n    <Template\n      title=\"Beomsoo-log\"\n      description=\"더 나은 제품을 위한 고민을 적고 있습니다.\"\n      url=\"url\"\n      image=\"img\"\n    >\n      <Container>\n        <CategoryList\n          selectedCategory={selectedCategory}\n          categoryList={categoryList}\n        />\n        <PostList selectedCategory={selectedCategory} posts={edges} />\n      </Container>\n    </Template>\n  );\n};\nexport default CategoriesPage;\nexport const categoryGetPostList = graphql`\n  query categoryGetPostList {\n    allMarkdownRemark(\n      sort: { order: DESC, fields: [frontmatter___date, frontmatter___title] }\n    ) {\n      edges {\n        node {\n          id\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            summary\n            date(formatString: \"YYYY.MM.DD.\")\n            categories\n            thumbnail {\n              childImageSharp {\n                fluid(\n                  maxWidth: 768\n                  maxHeight: 200\n                  fit: INSIDE\n                  quality: 100\n                ) {\n                  ...GatsbyImageSharpFluid_withWebp\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    file(name: { eq: \"profile-image\" }) {\n      childImageSharp {\n        fluid(maxWidth: 120, maxHeight: 120, fit: INSIDE, quality: 100) {\n          ...GatsbyImageSharpFluid_withWebp\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}